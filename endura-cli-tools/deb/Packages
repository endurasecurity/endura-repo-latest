Package: endura-cli-tools
Version: 0.7.2.8b0596c
Architecture: amd64
Maintainer: Infrared Security, LLC.
Installed-Size: 12143
Filename: ./endura-cli-tools_0.7.2.8b0596c_amd64.deb
Size: 3274748
MD5sum: 5b65aada3dfd199f288ff31284990efc
SHA1: d168fcf2f2ae411b968ab2459b7bd7fc889a2638
SHA256: 3b27c3f82b4dc8667c449b628750250833c1d7e7cb78ead04278ae24011dd69a
Section: Development
Priority: optional
Description: cli tools
 # endura-cli-tools
 .
 TBD
 .
 ## Environment Settings
 .
 - **ENDURA_BATCHER_AUTOFLUSH**: true/false (default: false)
 - **ENDURA_LOG_LEVEL**: level of logging (default: info, cli supported)
 - **ENDURA_LOG_FILE**: save logs to this file (default: undefined, cli
 supported)
 - **ENDURA_TEAM_SERVER**: https://your.team.server (default: undefined, cli
 supported)
 .
 ## ADDITIONAL CHECKS:
 .
 - Inventory of libraries being used
 .
 ## PRIORITY ISSUES
 .
 ### ISSUE: what's causing us to track the actual runner itself?
 .
 - runner executing with cwd set to job path. causes /usr/bin/endura tracking
 should be untouchable
 - why are we doing cwd? anything beyond the "container run"? maybe "cwd" only
 matches should not trigger job_pin
 .
   execute:
   - /home/runner/runners/2.322.0/bin/Runner.Worker:/usr/bin/bash
   - /home/runner/runners/2.322.0/externals/node20/bin/node:/usr/bin/git
   - /usr/bin/bash:/usr/bin/env
   - /usr/bin/bash:/usr/bin/make
   - /usr/bin/bash:/usr/bin/sleep
   - /usr/bin/bash:/usr/bin/sudo
   - /usr/bin/bash:/usr/local/lib/node_modules/npm/bin/npm-cli.js
   -
 /usr/bin/dash:/home/runner/work/endura-malware-demo/endura-malware-demo/node_modules/eslint/bin/eslint.js
   - /usr/bin/dash:/usr/bin/basename
   - /usr/bin/dash:/usr/bin/env
   - /usr/bin/dash:/usr/bin/envsubst
   - /usr/bin/dash:/usr/bin/gettext
   - /usr/bin/dash:/usr/bin/sed
   - /usr/bin/dash:/usr/bin/uname
   - /usr/bin/dash:/usr/lib/git-core/git
   - /usr/bin/env:/usr/local/bin/node
   - /usr/bin/git:/usr/bin/dash
   - /usr/bin/git:/usr/lib/git-core/git
   - /usr/bin/git:/usr/lib/git-core/git-submodule
   - /usr/bin/make:/usr/bin/bash
   - /usr/bin/sudo:/usr/bin/endura
   - /usr/local/bin/node:/usr/bin/dash
 .
 ### ISSUE: multiple ip address without hostname but we know are bound to
 "cloudflare"
 .
 - added logic to detect cloudflare ips upfront, but "cloudflare" is not the
 domain that was being accessed (alias)
   - /usr/local/bin/node:104.16.0.35:443
   - /usr/local/bin/node:104.16.1.35:443
   - /usr/local/bin/node:104.16.24.34:443
   - /usr/local/bin/node:104.16.25.34:443
   - /usr/local/bin/node:104.16.26.34:443
   - /usr/local/bin/node:104.16.27.34:443
   - /usr/local/bin/node:104.16.28.34:443
   - /usr/local/bin/node:104.16.3.35:443
   - /usr/local/bin/node:104.16.30.34:443
 .
 ## ISSUE: [x] how do we handle programs reading arbitrary /proc/[pid] paths?
 .
   - /usr/local/bin/node:/proc/2445/cgroup
   - /usr/local/bin/node:/proc/2445/maps
   - /usr/local/bin/node:/proc/2457/cgroup
   - /usr/local/bin/node:/proc/2457/maps
   - /usr/local/bin/node:/proc/2469/cgroup
   - /usr/local/bin/node:/proc/2469/maps
   - /usr/local/bin/node:/proc/2483/cgroup
   - /usr/local/bin/node:/proc/2483/maps
   - /usr/local/bin/node:/proc/2497/cgroup
   - /usr/local/bin/node:/proc/2497/maps
   - /usr/local/bin/node:/proc/2508/cgroup
   - /usr/local/bin/node:/proc/2508/maps
   - /usr/bin/sudo:/proc/1/limits
   - /usr/bin/sudo:/proc/2550/loginuid
   - /usr/bin/sudo:/proc/2550/stat
 .
 proc files relevant to what we enforce:
 .
 /proc/[pid]/{auxv,environ,fd,io,ksm_merging_pages,ksm_stat,mem,mountstats,mountstats,pagemap,patch_state,personality,syscall}
 .
 UPDATE: we treat certain files under /proc/ as special, so must be explicitly
 permitted here via path -> path of /proc/[pid]/exe, even if path-open grants
 .
 ## BACKLOG ISSUES
 .
 ### ISSUE: bpf_path_write_map is getting overloaded
 .
 The security_file_permission function in the Linux Security Module (LSM)
 framework is called for each individual write (or read) operation against a
 file descriptor, not just once when the file descriptor is opened.
 When a process performs a write operation using a file descriptor, the kernel's
 VFS (Virtual File System) layer triggers various security hooks, including
 security_file_permission. This happens for each distinct system call that
 performs I/O, such as write(), pwrite(), writev(), etc.
 The function serves as a hook that allows security modules (like SELinux,
 AppArmor, etc.) to perform permission checks on each operation, rather than
 just once at open time. This is important because:
 .
 Permissions or security contexts might change while a file descriptor remains
 open
 It allows for more granular auditing of file operations
 Different operations (read vs write) might have different security implications
 .
 The general call pattern is that for each write operation, the kernel will
 invoke security_file_permission with parameters indicating:
 .
 The file being accessed
 The specific permission being requested (MAY_WRITE for writes)
 .
 This per-operation checking enables security modules to implement dynamic
 access controls that can change during the lifetime of an open file descriptor.
 .
 ### [x] ISSUE: container run/socket - should it accept a tag?
 .
 - ex: hello-world:latest, hello-world:all?
 .
 ### ISSUE: mode derive failed
 .
 - not all events getting processed before job is removed
 - temporary workaround in job stop command:
 .
     // FIXME: best effort to allow processing of remaining events
     std::thread::sleep(Duration::from_secs(3));
 .
 ### ISSUE: some "writes" have empty dst path
 .
  - '/usr/bin/bash:'
   - '/usr/bin/endura:'
   - '/usr/bin/make:'
   - '/usr/local/bin/node:'
 .
 ## ISSUE: likely need an "overwrite" policy
 .
 - assume github actions and the demo app
 -> runner is based on node (is this actually true?)
 -> npm install run by node
 -> node can write to anything in workspace
 - where is the "git clone" equivalent in the server logs?
 -> ANS: events were lost due to starting job before server ready
 .
 ## QUESTION: musl threading performance issues
 .
 - see:
 https://www.linkedin.com/pulse/testing-alternative-c-memory-allocators-pt-2-musl-mystery-gomes/
 - adopt mimalloc? already implemented. no metrics to assess impact!!

